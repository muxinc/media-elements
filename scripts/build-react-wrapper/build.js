#!/usr/bin/env node
import { parseArgs } from 'node:util';
import process from 'node:process';
import { join, dirname } from 'node:path';
import { realpath, mkdir, readFile, writeFile, unlink } from 'node:fs/promises';
import { fileURLToPath } from 'node:url';
import { build as tsup } from 'tsup';

const header = `// This file is generated by media-elements/scripts/build-react-wrapper!\n`;

const nodePath = await realpath(process.argv[1]);
const modulePath = await realpath(fileURLToPath(import.meta.url));
const isCLI = nodePath === modulePath;

if (isCLI) cliBuild();

export async function cliBuild() {
  const { values, positionals } = parseArgs({
    options: {},
    strict: false,
    allowPositionals: true,
  });

  await build(positionals, values);
}

export async function build() {
  // read name from package.json
  const { name } = JSON.parse(await readFile('./package.json', 'utf8'));

  if (name.endsWith('video-element') || name.endsWith('audio-element')) {
    await mkdir('./dist', { recursive: true });

    // copy wrapper file templates/react.js to root folder and replace {{{name}}}, {{{filename}}}
    const wrapper = await readFile(join(dirname(modulePath), '/templates/react.ts'), 'utf8');

    const wrapperContent = wrapper
      .replace(/{{{element_name}}}/g, name.replace(/-element$/, ''))
      .replace(/{{{file_name}}}/g, name);

    await writeFile(`./dist/react.ts`, header + wrapperContent);

    // Check if there is a tsconfig.json file. If not, use default options.
    let compilerOptions = {};
    try {
      await readFile('./tsconfig.json');
    } catch (err) {
      compilerOptions = {
        target: 'es2022',
        module: 'es2022',
        moduleResolution: 'bundler',
        allowSyntheticDefaultImports: true,
      }
    }

    await tsup({
      entry: ['dist/react.ts'],
      dts: {
        resolve: ['ce-la-react'],
        compilerOptions
      },
      format: 'esm',
      external: [`../${name}.js`, 'react'],
    });

    await unlink('./dist/react.ts');
  }
}
